import firestore, {firebase} from '@react-native-firebase/firestore';
import storage from '@react-native-firebase/storage';
import 'react-native-get-random-values';
import uuid from 'react-native-uuid';

const Firebase = {
  //upload post to firestore method
  uploadPost: post => {
    //create unique id for post
    const id = uuid.v4();
    //get post data from post arg
    const postData = {
      id: id,
      postPhoto: post.photo,
      postTitle: post.title,
      postDescription: post.description,
      postedBy: post.postedBy,
      likes: [],
    };
    //update user 'posts' property w/ post id
    firestore()
      .collection('users')
      .doc(post.postedBy.id)
      .update({
        posts: firestore.FieldValue.arrayUnion(id),
      });
    //upload post to firestore 'posts' collection
    return firestore()
      .collection('posts')
      .doc(id)
      .set(postData);
  },
  //retrieve posts from firestore method
  getPosts: () => {
    //get all of collection 'posts' from database
    return firestore()
      .collection('posts')
      .get()
      .then(querySnapshot => {
        //get array of posts from querySnapshot
        let posts = querySnapshot.docs.map(doc => doc.data());
        //log posts for debugging/validation
        //console.log(posts);
        //return array of posts
        return posts;
      })
      .catch(error => {
        //log errors if they occur
        console.log('Error retreiving posts: ', error);
      });
  },
  //get all of a user's posts (filter by postedBy id)
  getUserPosts: userId => {
    //get all of user's posts from database,
    return firestore()
    .collection('posts')
    .where('postedBy.id', '==', userId)
    .get()
    .then( querySnapshot => {
      //return posts posted by specified user
      let posts = querySnapshot.docs.map(doc => doc.data());
      console.log('USER POSTS: ', posts)
      return posts;
    }).catch(error => {
        //log errors if they occur
        console.log('Error retreiving posts: ', error);
      });
  },
  //create user entry in firestore method
  newUser: user => {
    //get user uid generated by firebase Auth
    console.log('Creating user with id: ', user.id);
    //get user data
    const userData = {
      id: user.id,
      name: user.name,
      username: user.username,
      email: user.email,
      avatar: user.avatar,
      posts: [],
    };
    //create entry in firestore 'users' collection
    return firestore()
      .collection('users')
      .doc(user.id)
      .set(userData);
  },
  //get user data from firestore (by user uid)
  getUser: async uid => {
    try {
      const documentSnapshot = await firestore()
        .collection('users')
        .doc(uid)
        .get();
      if (documentSnapshot.exists) {
        //user exists
        const foundUser = documentSnapshot.data();
        //log user for debugging/validation
        console.log('Retrieved User: ', foundUser);
        //return user found in firestore
        return foundUser;
      } else {
        //no document exists for given uid
        console.log('USER NOT FOUND WITH ID: ', uid);
      }
    } catch (error) {
      //log errors
      console.log('Error retreiving user: ', uid);
      console.log('With Error: ', error);
    }
  },
  //update likes of post, add or remove user ID
  updateLikes: async likeData => {
    console.log('updating likes: ', likeData);
    try {
      if (likeData.liked) {
        //user wants to add like
        await firestore()
          .collection('posts')
          .doc(likeData.post.id)
          .update({
            //add user ID to likes array for post
            likes: firestore.FieldValue.arrayUnion(likeData.user),
          });
        return likeData.likes + 1;
      } else {
        //user wants to remove like
        await firestore()
          .collection('posts')
          .doc(likeData.post.id)
          .update({
            //add user ID to likes array for post
            likes: firestore.FieldValue.arrayRemove(likeData.user),
          });
        return likeData.likes - 1;
      }
    } catch (error) {
      //log errors
      console.log('Error liking post-- ', likeData);
      console.log('With Error: ', error);
    }
  },
  //upload user image to firebase storage
  uploadImage: async (imgData, imgCallback) => {
    try {
      //create bucket storage reference
      const ref = firebase.storage().ref(imgData.storagePath);
      //upload image to storage
      await ref.putFile(imgData.localPath);
      //get download url
      const imageUrl = await ref.getDownloadURL().then(newUrl => {
        console.log('newUrl from Firebase storage: ', newUrl);
        imgCallback(newUrl);
        return newUrl;
      });
    } catch (error) {
      console.log('Error uploading image: ', error);
    }
  },

  //update user avatar
  updateAvatar: async (userId, avatarUri) => {
    await firestore()
      .collection('users')
      .doc(userId)
      .update({
        //add user ID to likes array for post
        avatar: avatarUri,
      });
  },
};

export default Firebase;
